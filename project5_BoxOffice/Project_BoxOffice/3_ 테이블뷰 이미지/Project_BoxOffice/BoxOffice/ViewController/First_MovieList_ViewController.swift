//
//  ViewController.swift
//  BoxOffice
//
//  Created by inooph on 2021/09/08.
//

import UIKit

class First_MovieList_ViewController: UIViewController, UITableViewDataSource {
    /*
     //Base URLÏùÄ https://connect-boxoffice.run.goorm.io/ ÏûÖÎãàÎã§.
     [ÌôîÎ©¥ 1 - ÏòÅÌôî Î™©Î°ù]
     [ÌôîÎ©¥ Íµ¨ÏÑ±]
     - [] ÌÉ≠ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ÏôÄ ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Ïùò Í≤∞Ìï© ÌòïÌÉúÏûÖÎãàÎã§.
        - [„Öá] Ï≤´ Î≤àÏß∏ ÌÉ≠ÏùÄ 'Table', Îëê Î≤àÏß∏ ÌÉ≠ÏùÄ 'Collection' ÌÉÄÏù¥ÌãÄÎ°ú Íµ¨ÏÑ±Ìï©ÎãàÎã§.
        - [] Ï≤´ Î≤àÏß∏ ÌÉ≠ ÌôîÎ©¥ÏùÄ ÌÖåÏù¥Î∏îÌòïÌÉúÎ°ú, Îëê Î≤àÏß∏ ÌÉ≠ ÌôîÎ©¥ÏùÄ Ïª¨Î†âÏÖò ÌòïÌÉúÎ°ú Í∞ôÏùÄ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÏΩòÌÖêÏ∏†Î•º ÌëúÏãúÌï©ÎãàÎã§.
     
        - [„Öá] ÌÖåÏù¥Î∏î ÌôîÎ©¥
             - [„Öá] ÌÖåÏù¥Î∏îÎ∑∞ ÏÖÄÏóê ÏòÅÌôî Ìè¨Ïä§ÌÑ∞Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.
             - [„Öá] Ìè¨Ïä§ÌÑ∞ Ïò§Î•∏Ìé∏Ïóê ÏòÅÌôîÏ†ïÎ≥¥(Ï†úÎ™©„Öá, Îì±Í∏â„Öá, ÌèâÏ†ê„Öá, ÏòàÎß§ÏàúÏúÑ„Öá, ÏòàÎß§Ïú®„Öá, Í∞úÎ¥âÏùº„Öá)Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.
     
        - [] Ïª¨Î†âÏÖò ÌôîÎ©¥
             - [] Ïª¨Î†âÏÖòÎ∑∞ ÏÖÄÏóê ÏòÅÌôî Ìè¨Ïä§ÌÑ∞ÏôÄ Îì±Í∏âÏùÑ Ìï®Íªò Î≥¥Ïó¨Ï§çÎãàÎã§.
             - [] Ìè¨Ïä§ÌÑ∞ ÏïÑÎûò ÏòÅÌôîÏ†ïÎ≥¥(Ï†úÎ™©, ÌèâÏ†ê, ÏàúÏúÑ, ÏòàÎß§Ïú®, Í∞úÎ¥âÏùº)Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.
     
     - [] ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò ÏïÑÏù¥ÌÖúÏùò ÌÉÄÏù¥ÌãÄÏùÄ ÏòÅÌôî Ï†ïÎ†¨Í∏∞Ï§ÄÏùÑ ÌëúÏãúÌï©ÎãàÎã§.
     
     - [] ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖòÎ∞î Ïò§Î•∏Ï™Ω Î∂ÄÎ∂ÑÏóêÎäî ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò ÏïÑÏù¥ÌÖúÏúºÎ°ú Î∞î Î≤ÑÌäºÏù¥ ÏûàÏäµÎãàÎã§.
        - [] Î∞î Î≤ÑÌäºÏùÄ Ï†ïÎ†¨Î∞©ÏãùÏùÑ ÏÑ†ÌÉùÌïòÍ∏∞ ÏúÑÌïú Î≤ÑÌäºÏûÖÎãàÎã§.
     
     [Í∏∞Îä•]
     - [] ÌôîÎ©¥ Ïò§Î•∏Ï™Ω ÏÉÅÎã® Î∞î Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ï†ïÎ†¨Î∞©ÏãùÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏäµÎãàÎã§. (ÏòàÎß§Ïú®/ÌÅêÎ†àÏù¥ÏÖò/Í∞úÎ¥âÏùº Í∏∞Ï§Ä)
        - [] ÌÖåÏù¥Î∏îÎ∑∞ÏôÄ Ïª¨Î†âÏÖòÎ∑∞Ïùò ÏòÅÌôî Ï†ïÎ†¨Î∞©ÏãùÏùÄ ÎèôÏùºÌïòÍ≤å Ï†ÅÏö©Îê©ÎãàÎã§. Ï¶â, Ìïú ÌôîÎ©¥ÏóêÏÑú Î≥ÄÍ≤ΩÌïòÎ©¥ Îã§Î•∏ ÌôîÎ©¥ÏóêÎèÑ Î≥ÄÍ≤ΩÏù¥ Ï†ÅÏö©ÎêòÏñ¥ ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§.
     
     - [] ÌÖåÏù¥Î∏îÎ∑∞ÏôÄ Ïª¨Î†âÏÖòÎ∑∞Î•º ÏïÑÎûòÏ™ΩÏúºÎ°ú Ïû°ÏïÑÎãπÍ∏∞Î©¥ ÏÉàÎ°úÍ≥†Ïπ®Îê©ÎãàÎã§.
     - [] ÌÖåÏù¥Î∏îÎ∑∞/Ïª¨Î†âÏÖòÎ∑∞Ïùò ÏÖÄÏùÑ ÎàÑÎ•¥Î©¥ Ìï¥Îãπ ÏòÅÌôîÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î≥¥Ïó¨Ï£ºÎäî ÌôîÎ©¥ 2Î°ú Ï†ÑÌôòÌï©ÎãàÎã§.
     */
    
    @IBOutlet weak var tableView: UITableView!
    var movies: [Movie] = []
    var movieList: MovieList?
    let cellIdentifier: String = "firstCell"
    
    let recieveMovieID: String = "DidRecieveMovies"
    lazy var DidRecievedMoviesNotification: Notification.Name = Notification.Name(recieveMovieID)
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return movies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell: FirstTableViewCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as? FirstTableViewCell else { return UITableViewCell() }
        
        guard let movie = self.movies[indexPath.row] as? Movie else { return cell }
        cell.update(movie)
        DispatchQueue.global().async {
            guard let imageURL: URL = URL(string: movie.thumb) else { return }
            guard let imageData: Data = try? Data(contentsOf: imageURL) else { return }

            DispatchQueue.main.async {
                if let index: IndexPath = tableView.indexPath(for: cell) {
                    if index.row == indexPath.row {
                        cell.posterImageView.backgroundColor = .systemBackground
                        cell.posterImageView.image = UIImage(data: imageData)
                    } else {
                        cell.posterImageView.image = nil
                        cell.posterImageView.backgroundColor = .gray
                    }
                }
            }
        }
        return cell
    }
    
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(didRiecieveMovieNotification(_:)), name: DidRecievedMoviesNotification, object: nil)
    }
    
        @objc func didRiecieveMovieNotification(_ noti: Notification) {
        guard let movies: [Movie] = noti.userInfo?["movies"] as? [Movie] else { return }
        guard let movieList: MovieList = noti.userInfo?["movieList"] as? MovieList else { return }
        self.movies = movies
        self.movieList = movieList
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
            // MARK: - [„Öá] Î∑∞ÌÉÄÏù¥ÌãÄ ÏÑ∏ÌåÖ - Ïï± Ï¥àÍ∏∞ÏßÑÏûÖ
            guard let sort = self.movieList?.order_type else { return }
            self.title = getViewTitleFromSortType(sort)
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        requestMoovies(SortType.reservation)
    }
    
    @IBAction func tappedSortingButton(_ sender: Any) {
        print("üèÜüèÜüèÜ")
        let title = "Ï†ïÎ†¨Î∞©Ïãù ÏÑ†ÌÉù"
        let message = "ÏòÅÌôîÎ•º Ïñ¥Îñ§ ÏàúÏÑúÎ°ú Ï†ïÎ†¨Ìï†ÍπåÏöî?"
        showAlert(style: .actionSheet, title: title, message: message, handler: {print("99999999999999")})
    }
    
    // 0: ÏòàÎß§Ïú®(reservation), 1: ÌÅêÎ†àÏù¥ÏÖò(curation), 2: Í∞úÎ¥âÏùº(openingDate)
    // MARK: - [] Ìï∏Îì§Îü¨ÏóêÏÑú Ìï† Ïùº >> Ï†ïÎ†¨Ìïú Îç∞Ïù¥ÌÑ∞Î°ú Í∞ÄÏ†∏Ïò§Í∏∞[], ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î¶¨Î°úÎìú[], ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÌÉÄÏù¥ÌãÄ Î≥ÄÍ≤Ω[]
    func showAlert(style: UIAlertController.Style, title: String, message: String, handler: @escaping () -> () ) {
        var sortType: SortType = SortType.reservation
        let alertController: UIAlertController
        alertController = UIAlertController(title: title, message: message, preferredStyle: style)
        
        let reservationAction: UIAlertAction
        reservationAction = UIAlertAction(title: "ÏòàÎß§Ïú®", style: .default,
                          handler: { alertAction in sortType = .reservation })
        
        let curationAction: UIAlertAction
        curationAction = UIAlertAction(title: "ÌÅêÎ†àÏù¥ÏÖò", style: .default,
                           handler: { alertAction in sortType = .curation })
        
        let openingDateAction: UIAlertAction
        openingDateAction = UIAlertAction(title: "Í∞úÎ¥âÏùº", style: .default,
                                          handler: { alertAction in sortType = .openingDate; handler() })
        
        let cancelAction: UIAlertAction
        cancelAction = UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel)
        
        alertController.addAction(reservationAction)
        alertController.addAction(curationAction)
        alertController.addAction(openingDateAction)
        alertController.addAction(cancelAction)
        
        self.present(alertController, animated: true, completion: {
            print("execution func showAlert, sortType : \(sortType)")
            
        })
    }
}

